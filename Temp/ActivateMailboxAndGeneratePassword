#=======================================================================================================================================================
# CreateUserAndMailboxes v1.0 by Charlie Gustav Skog - https://github.com/GIH-IT/Scripts/blob/master/CreateUsersAndMailboxes/CreateUsersAndMailboxes.ps1
# Script to create student accounts from CSV file (pnr,FirstName,LastName).
# Make sure you have the Active Directory PowerShell module installed and are running this in an elevated terminal.
# CreateUserAndMailboxes.ps1 -InDataPath <path> -ResultPath <path>
# InDataPath is mandatory.
#=======================================================================================================================================================
### Parameters
Param(
  [Parameter(Mandatory=$true, Position=0)]
  [string]$InDataPath,
  [Parameter(Mandatory=$false, Position=1)]
  [string]$ResultPath = $PSScriptRoot + $(Get-Item $InDataPath).BaseName + "-log.csv"
)


### PowerShell Title
#Set PowerShell title.
$host.ui.RawUI.WindowTitle = "CreateUserAndMailboxes v1.0 by Charlie Gustav Skog"


### Modules
# Load the Active Directory module.
Import-Module ActiveDirectory


### Checks and Variables
# Check if input file exists.
If (Test-Path $InDataPath) {}
Else {
  Write-Host "Input file not found."
  exit
}

# Check if result file already exists. If it does, exit script.
If (Test-Path $ResultPath) {
  Write-Host $ResultPath "already exists."
  exit
}

# Default variables.
$ScriptCredentials = Get-Credential
$DCTarget = "gihdc03.ihs.se"
$MailServerTarget = "gihex02.ihs.se"
$MailServerTargetURI = "http://" + $MailServerTarget + "/powershell/"
$InData = ConvertFrom-CSV -Delimiter ";" $(Get-Content $InDataPath)
$StudentFQDN = "student.gih.se"
$StudentMailDatabase = "GIH-STUD01"
$StudentOU = "OU=ScriptTemp,OU=ManuallyCreated,OU=StudentAccounts,OU=Users,OU=GIH,DC=ihs,DC=se"
$ResultHeaders = "StudentName;StudentDisplayName;StudentSAMAccountName;StudentUserPrincipalName;StudentPNR;StudentPassword;StudentCreated;StudentNotCreatedReason"

# Create result file and write headers.
New-Item $ResultPath -Force
$ResultHeaders >> $ResultPath

# Check connection to Exchange server and load Exchange PowerShell module, if down exit script.
If (Test-Connection -ComputerName $MailServerTarget -Count 1 -ErrorAction SilentlyContinue) {}
Else {
  Write-Host "Connection to" $MailServerTarget "is down."
  exit
}

# Check connection to Domain Controller from Exchange server, if down exit script.
If (Test-Connection -ComputerName $DCTarget -Count 1 -ErrorAction SilentlyContinue) {}
Else {
  Write-Host "Connection to" $DCTarget "is down."
  exit
}

# Set up PSSession.
$MailServerPSSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri $MailServerTargetURI -Credential $ScriptCredentials -Authentication Kerberos -AllowRedirection
Import-PSSession $MailServerPSSession -CommandName New-Mailbox


### Functions
# Function to convert password into a secure string.
Function New-SecureString() {
  Param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]$PlainText
  )
  $SecureString = new-object System.Security.SecureString
  ForEach($char in $PlainText.ToCharArray()) {
    $SecureString.AppendChar($char)
  }
  Return $SecureString
}

# Function to generate a random password.
Function Get-RandomPassword() {
  Param(
    [Parameter(Mandatory=$false, Position=0)]
    [int]$length=10
  )
  $AlphabetUpper = $NULL;For ($a=65; $a -le 90; $a++){$AlphabetUpper+=,[char][byte]$a}
  $AlphabetLower = $NULL;For ($a=97; $a -le 122; $a++){$AlphabetLower+=,[char][byte]$a}
  $Numerics = $NULL;For ($a=48; $a -le 57; $a++){$Numerics+=,[char][byte]$a}
  For ($loop=1; $loop -le $length; $loop++) {
    $TempPassword+=($AlphabetUpper + $AlphabetLower + $Numerics | Get-Random)
  }
  Return $TempPassword
}

# Function to write output to result file.
Function Write-Result() {
  Param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]$path,
    [Parameter(Mandatory=$true, Position=1)]
    [string]$data
  )
  $data >> $path
}


### Script
ForEach ($Student in $InData) {
  # Student variables.
  $StudentRandomPassword = Get-RandomPassword
  $StudentRandomPasswordSecure = New-SecureString $StudentRandomPassword
  $StudentFirstName = $Student.FirstName.Trim()
  $StudentLastName = $Student.LastName.Trim()
  $StudentFirstNameFixed = $(Convert-ToLatinCharacters $StudentFirstName)
  $StudentLastNameFixed = $(Convert-ToLatinCharacters $StudentLastName)
  $StudentAlias = $StudentFirstNameFixed.ToLower().replace(' ', '_') + "." + $StudentLastNameFixed.ToLower().replace(' ', '_') + "$StudentRandomNumber"
  $StudentSAM = $StudentFirstNameFixed.ToLower().SubString(0,2) + "$StudentRandomNumber" + $StudentLastNameFixed.ToLower().SubString(0,2)
  $StudentUPN = $StudentAlias + "@" + $StudentFQDN

  # Create the Student by connecting through the PowerShell session to a mail server and running New-Mailbox which creates a corresponding Active Directory account.
  New-Mailbox -DomainController $DCTarget -ResetPasswordOnNextLogon $true -Password $StudentRandomPasswordSecure -Database $StudentMailDatabase -UserPrincipalName $StudentUPN -SamAccountName $StudentSAM -Name $StudentName -OrganizationalUnit $StudentOU -FirstName $StudentFirstName -LastName $StudentLastName

  # Write out to result file.
  Write-Result -path $ResultPath -data "$StudentName;$StudentDisplayName;$StudentSAM;$StudentUPN;$StudentPNR;$StudentRandomPassword;$StudentCreated;$StudentNotCreatedReason"
}
